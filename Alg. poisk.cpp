#include <iostream>
#include <locale.h>
#include <conio.h>

using namespace std;

int main()
{
	setlocale(LC_ALL, "RUS");
	int I[100], i, N = 15, count, check;
	int K[100], k;

	// Таблица для S и Q алгоритмов
	K[1] = 1;
	K[2] = 2;
	K[3] = 3;
	K[4] = 4;
	K[5] = 5;
	K[6] = 6;
	K[7] = 7;
	K[8] = 8;
	K[9] = 7;
	K[10] = 6;
	K[11] = 5;
	K[12] = 4;
	K[13] = 3;
	K[14] = 2;
	K[15] = 1;

	// Выводим таблицу на экран
	cout << "Таблица: " << '\n';
	for (i = 1; i <= N; i++) cout << i << ")" << K[i] << '\n';

	cout << "Введите ключ: ";
	cin >> k;
	K[0] = k;

	cout << '\n' << "Алгоритм S:" << '\n';
	i = 1;
	count = 0;
	check = 0;
	while (i <= N) 
	{
		count++; // Считаем количество прогонов
		if (K[i] == k) 
		{
			cout << "Поиск удачный, номер найденного элемента - " << i << ";" << '\n';

			i++; 
		}
		else 
		{
		
			if (i == N) 
			{ // Если рассматриваем последний элемент
				if (check==0)
				cout << "Поиск неудачный;" << '\n';
			}
			count++;
			i++;
		}
	}
	cout << "Количество прогонов: " << count << ";" << '\n';

	cout << '\n' << "Алгоритм Q:" << '\n';
	i = 1;
	count = 0;
	check = 0;
	K[N + 1] = k; 
	{
		while (true)
		{
			while (K[i] != k)
			{
				i++;
				count++;
			}
			if (i <= N)
			{ 
				cout << "Поиск удачный, номер найденного элемента - " << i << ";" << '\n';
				check++;
				i++;
			}
			else
			{
				count++;
				break;
			}
		}
	}
	if (check == 0)
		cout << "Поиск неудачный;" << '\n';
	
	cout << "Количество прогонов: " << count << ";" << '\n';

	// Таблица для T и B алгоритмов (упорядоченная по убыванию)
	K[1] = 15;
	K[2] = 14;
	K[3] = 11;
	K[4] = 9;
	K[5] = 9;
	K[6] = 8;
	K[7] = 8;
	K[8] = 8;
	K[9] = 7;
	K[10] = 6;
	K[11] = 5;
	K[12] = 4;
	K[13] = 4;
	K[14] = 2;
	K[15] = 1 ;

	// Выводим таблицу на экран
	cout << "Таблица: " << '\n';
	for (i = 1; i <= N; i++) cout << i << ")" << K[i] << '\n';

	cout << "Введите ключ: ";
	cin >> k;
	K[0] = k;

	cout << '\n' << "Алгоритм T:" << '\n';

	i = 1;
	count = 0;
	check = 0;
	while (i <= N) 
	{
		count++; // Считаем количество прогонов
		if (K[i] <= k) {
			while (K[i] == k) {
				if (i <= N)
					cout << "Поиск удачный, номер найденного элемента - " << i << ";" << '\n';
				i++; // Заканчиваем поиск
				check++;
			}
			i = N + 1;
			if (K[i] != k && check == 0) {
				cout << "Поиск неудачный;" << '\n';
				i = N + 1; // Заканчиваем поиск
			}
		}
		else {
			i++;
		}
	}
	cout << "Количество прогонов: " << count << ";" << '\n';

	cout << '\n' << "Алгоритм B:" << '\n';
	i = 1;
	count = 0;
	int i_nach = N, i_kon = 1, i_sr; // начальные установки
	while (i <= N) {
		count++;
		if (i_nach >= i_kon) {
			i_sr = (i_nach + i_kon) / 2;
			if (K[i_sr] > k) {
				i_kon = i_sr + 1;}
			else {
				if (K[i_sr] == k) {
					i = i_sr;
					cout << "Поиск удачный, номер найденного элемента - " << i_sr << ";" << '\n';
					if (K[i_sr+1] == k && i_sr != N) // Если есть элементы равные  ключу снизу
						while (K[i_sr + 1] == k) {
							cout << "Поиск удачный, номер найденного элемента - " << i_sr + 1 << ";" << '\n';
							i_sr++;}
					else if (K[i - 1] == k && i != 1) // Если есть элементы равные  ключу сверху
						while (K[i - 1] == k) {
							cout << "Поиск удачный, номер найденного элемента - " << i - 1 << ";" << '\n';
							i--;}
					i = N + 1; // Заканчиваем поиск
				}
				else {
					i_nach = i_sr - 1;}}}
		else {
			cout << "Поиск неудачный;" << '\n';
			i = N + 1; // Заканчиваем поиск
		}}
	cout << "Количество прогонов: " << count << ";" << '\n';
	
	getch();
	return 0;
}
